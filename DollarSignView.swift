//
// DollarSignView.swift
// Generated by Core Animator version 1.4 on 3/12/17.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

private class DollarSignPassthroughView: UIView {
    override func point(inside point: CGPoint, with event: UIEvent?) -> Bool {
        for subview in subviews as [UIView] {
            if subview.point(inside: convert(point, to: subview), with: event) { return true }
        }
        return false
    }
}

@IBDesignable
class DollarSignView : UIView, CAAnimationDelegate {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 166, height: 223))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .scaleToFill:
				break
			case .scaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransform(scaleX: xScale, y: yScale)
			scalingView.center = CGPoint(x:self.bounds.midX, y:self.bounds.midY)
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = Bundle(for:type(of: self))
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:166, height:223)
		__scaling__.center = CGPoint(x:83.1, y:111.7)
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let dollarSign__root = DollarSignPassthroughView()
		let dollarSign__xScale = DollarSignPassthroughView()
		let dollarSign__yScale = DollarSignPassthroughView()
		let dollarSign = UIImageView()
		let imgDollarSign = UIImage(named:"Dollar-Sign.png", in: bundle, compatibleWith: nil)
		if imgDollarSign == nil {
			print("** Warning: Could not create image from 'Dollar-Sign.png'")
		}
		dollarSign.image = imgDollarSign
		dollarSign.contentMode = .center
		dollarSign.layer.anchorPoint = CGPoint(x:0.507, y:0.486)
		dollarSign.bounds = CGRect(x:0, y:0, width:216.0, height:209.0)
		dollarSign__root.layer.position = CGPoint(x:84.558, y:108.766)
		dollarSign__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		dollarSign__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		dollarSign__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(dollarSign__root)
		dollarSign__root.addSubview(dollarSign__xScale)
		dollarSign__xScale.addSubview(dollarSign__yScale)
		dollarSign__yScale.addSubview(dollarSign)
		__scaling__.addSubview(dollarSign__root)
		viewsByName["Dollar-Sign__root"] = dollarSign__root
		viewsByName["Dollar-Sign__xScale"] = dollarSign__xScale
		viewsByName["Dollar-Sign__yScale"] = dollarSign__yScale
		viewsByName["Dollar-Sign"] = dollarSign

		self.viewsByName = viewsByName
	}

	// - MARK: Jiggle

	func addJiggleAnimation() {
		addJiggleAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addJiggleAnimation(completion: ((Bool) -> Void)?) {
		addJiggleAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addJiggleAnimation(removedOnCompletion: Bool) {
		addJiggleAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addJiggleAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addJiggleAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addJiggleAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let easeOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseOut)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.600
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "Jiggle")
			self.animationCompletions[layer.animation(forKey: "Jiggle")!] = complete
		}

		let dollarSignRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		dollarSignRotationAnimation.duration = 0.600
		dollarSignRotationAnimation.values = [0.000, 0.180, 0.001, -0.215, 0.000] as [Float]
		dollarSignRotationAnimation.keyTimes = [0.000, 0.250, 0.500, 0.750, 1.000] as [NSNumber]
		dollarSignRotationAnimation.timingFunctions = [easeOutTiming, easeOutTiming, easeOutTiming, easeOutTiming]
		dollarSignRotationAnimation.beginTime = beginTime
		dollarSignRotationAnimation.fillMode = fillMode
		dollarSignRotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Dollar-Sign__root"]?.layer.add(dollarSignRotationAnimation, forKey:"Jiggle_Rotation")

		let dollarSignScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		dollarSignScaleXAnimation.duration = 0.600
		dollarSignScaleXAnimation.values = [1.000, 1.350, 1.000, 1.250, 1.000] as [Float]
		dollarSignScaleXAnimation.keyTimes = [0.000, 0.250, 0.500, 0.750, 1.000] as [NSNumber]
		dollarSignScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		dollarSignScaleXAnimation.beginTime = beginTime
		dollarSignScaleXAnimation.fillMode = fillMode
		dollarSignScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Dollar-Sign__xScale"]?.layer.add(dollarSignScaleXAnimation, forKey:"Jiggle_ScaleX")

		let dollarSignScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		dollarSignScaleYAnimation.duration = 0.600
		dollarSignScaleYAnimation.values = [1.000, 1.350, 1.000, 1.250, 1.000] as [Float]
		dollarSignScaleYAnimation.keyTimes = [0.000, 0.250, 0.500, 0.750, 1.000] as [NSNumber]
		dollarSignScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		dollarSignScaleYAnimation.beginTime = beginTime
		dollarSignScaleYAnimation.fillMode = fillMode
		dollarSignScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Dollar-Sign__yScale"]?.layer.add(dollarSignScaleYAnimation, forKey:"Jiggle_ScaleY")

		let dollarSignTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		dollarSignTranslationYAnimation.duration = 0.600
		dollarSignTranslationYAnimation.values = [-0.325, -0.325] as [Float]
		dollarSignTranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		dollarSignTranslationYAnimation.timingFunctions = [linearTiming]
		dollarSignTranslationYAnimation.beginTime = beginTime
		dollarSignTranslationYAnimation.fillMode = fillMode
		dollarSignTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Dollar-Sign__root"]?.layer.add(dollarSignTranslationYAnimation, forKey:"Jiggle_TranslationY")
	}

	func removeJiggleAnimation() {
		self.layer.removeAnimation(forKey: "Jiggle")
		self.viewsByName["Dollar-Sign__root"]?.layer.removeAnimation(forKey: "Jiggle_Rotation")
		self.viewsByName["Dollar-Sign__xScale"]?.layer.removeAnimation(forKey: "Jiggle_ScaleX")
		self.viewsByName["Dollar-Sign__yScale"]?.layer.removeAnimation(forKey: "Jiggle_ScaleY")
		self.viewsByName["Dollar-Sign__root"]?.layer.removeAnimation(forKey: "Jiggle_TranslationY")
	}

	// MARK: CAAnimationDelegate
	func animationDidStop(_ anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValue(forKey: anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimation(forKey: "Jiggle")
	}
}